data Bool {
  True;
  False;
}

data List(a: Type) {
  Nil;
  Cons(x: a, xs: List a);
}

data Equal('a: Type, x: a, y: a) {
  Refl: Equal(x, x)
}

def id(a: Type, xs: a) = xs
def bar(x: Bool): Bool = x

def zzz = bar True

-- def ttt = Nil (a = Bool)
-- def xxx = Cons True ttt
def fff = id ? True

%typeof fff
%typeof zzz
%typeof id
%eval zzz
%check fff = fff
%check zzz : (Bool)

-- def not(x: Bool) = case x {
--   True -> False;
--   False -> True;
-- }
