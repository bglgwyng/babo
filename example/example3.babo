data Bool where {
  True;
  False;
}

data Foo(a: Bool) where {
  A: Foo(True);
  B: Foo(False);
}

%typeof Foo
%typeof A
def map(a : Bool): Foo(True) = case a of {
  True -> A;
  False -> A;
}

%typeof map

-- %typeof map

-- def maybe('a 'b: Type, x: b, f: a -> b, xs: Maybe(a)) = case xs {
--   Just(x) -> f(x);
--   Nothing -> x;
-- }

-- %typeof maybe